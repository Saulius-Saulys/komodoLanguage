log("------------------ Fibonacci Example ------------------")

recursiveFibonacci (i) => {
    (i <= 2) ? {
        return 1;
    } : {
        return recursiveFibonacci(i-1) + recursiveFibonacci(i-2);
    }
}

loopFibonacci (n) => {

    int previouspreviousNumber = 0;
    int previousNumber = 0;
    int currentNumber = 1;
    int i = 1;

    while(i < n) {
        previouspreviousNumber = previousNumber;
        previousNumber = currentNumber;
        currentNumber = previouspreviousNumber + previousNumber;
        i = i + 1;
    }

    return currentNumber;
}

loopWhileFibonacci (n) => {

    int previouspreviousNumber = 0;
    int previousNumber = 0;
    int currentNumber = 1;
    int i = 1;

    while(i < n) {
        previouspreviousNumber = previousNumber;
        previousNumber = currentNumber;
        currentNumber = previouspreviousNumber + previousNumber;
        i = i + 1;
    }

    return currentNumber;
}

loopFibonacci(n) => {

    int previouspreviousNumber = 0;
    int previousNumber = 0;
    int currentNumber = 1;

    for (int i = 1; i < n; i++) {
        previouspreviousNumber = previousNumber;
        previousNumber = currentNumber;
        currentNumber = previouspreviousNumber + previousNumber;
    }

    return currentNumber;
}

int n = 7;

log("Fibonacci using while")
log(loopWhileFibonacci(n))

log("Fibonacci using for")
log(loopFibonacci(n))

log("Fibonacci using recurrsion")
log(recursiveFibonacci(n))

# Comment #
logLine("Log line")
logLine(toDouble("4.5"))
logLine(toInt("5"))
logLine(toString(4.5))
cypher encryptedBoi = __I am so encrypted string__;
logLine(encryptedBoi)
logLine(decrypt(encryptedBoi))
cypher encryptedNumber = __5__;
logLine(encryptedNumber)
logLine(decrypt(encryptedNumber))
